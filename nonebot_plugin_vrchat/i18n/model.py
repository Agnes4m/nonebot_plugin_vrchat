# This file is @generated by tarina.lang CLI tool
# It is not intended for manual editing.

from tarina.lang.model import LangItem, LangModel


class NbpVrcGeneral:
    help: LangItem = LangItem("nbp_vrc", "general.help")
    unknown_error: LangItem = LangItem("nbp_vrc", "general.unknown_error")
    server_error: LangItem = LangItem("nbp_vrc", "general.server_error")
    discard_select: LangItem = LangItem("nbp_vrc", "general.discard_select")
    empty_search_keyword: LangItem = LangItem("nbp_vrc", "general.empty_search_keyword")
    empty_message: LangItem = LangItem("nbp_vrc", "general.empty_message")
    invalid_ordinal_format: LangItem = LangItem(
        "nbp_vrc",
        "general.invalid_ordinal_format",
    )
    invalid_ordinal_range: LangItem = LangItem(
        "nbp_vrc",
        "general.invalid_ordinal_range",
    )


class NbpVrcLogin:
    not_logged_in: LangItem = LangItem("nbp_vrc", "login.not_logged_in")
    login_expired: LangItem = LangItem("nbp_vrc", "login.login_expired")
    overwrite_login_info: LangItem = LangItem("nbp_vrc", "login.overwrite_login_info")
    send_login_info: LangItem = LangItem("nbp_vrc", "login.send_login_info")
    send_2fa_code: LangItem = LangItem("nbp_vrc", "login.send_2fa_code")
    use_cached_login_info: LangItem = LangItem("nbp_vrc", "login.use_cached_login_info")
    discard_login: LangItem = LangItem("nbp_vrc", "login.discard_login")
    invalid_account: LangItem = LangItem("nbp_vrc", "login.invalid_account")
    invalid_info_format: LangItem = LangItem("nbp_vrc", "login.invalid_info_format")
    invalid_2fa_format: LangItem = LangItem("nbp_vrc", "login.invalid_2fa_format")
    invalid_2fa_code: LangItem = LangItem("nbp_vrc", "login.invalid_2fa_code")
    logged_in: LangItem = LangItem("nbp_vrc", "login.logged_in")


class NbpVrcFriend:
    empty_friend_list: LangItem = LangItem("nbp_vrc", "friend.empty_friend_list")
    empty_friend: LangItem = LangItem("nbp_vrc", "friend.empty_friend")
    empty_friend_request: LangItem = LangItem("nbp_vrc", "friend.empty_friend_request")
    exist_friend: LangItem = LangItem("nbp_vrc", "friend.exist_friend")
    sucess_request: LangItem = LangItem("nbp_vrc", "friend.sucess_request")
    incoming_request: LangItem = LangItem("nbp_vrc", "friend.incoming_request")
    outgoing_request: LangItem = LangItem("nbp_vrc", "friend.outgoing_request")
    no_request: LangItem = LangItem("nbp_vrc", "friend.no_request")


class NbpVrcUser:
    send_user_name: LangItem = LangItem("nbp_vrc", "user.send_user_name")
    no_user_found: LangItem = LangItem("nbp_vrc", "user.no_user_found")
    searched_user_tip: LangItem = LangItem("nbp_vrc", "user.searched_user_tip")
    reply_index: LangItem = LangItem("nbp_vrc", "user.reply_index")
    reply_index_add: LangItem = LangItem("nbp_vrc", "user.reply_index_add")


class NbpVrcWorld:
    send_world_name: LangItem = LangItem("nbp_vrc", "world.send_world_name")
    no_world_found: LangItem = LangItem("nbp_vrc", "world.no_world_found")
    searched_world_tip: LangItem = LangItem("nbp_vrc", "world.searched_world_tip")
    searched_world_info: LangItem = LangItem("nbp_vrc", "world.searched_world_info")


class NbpVrcLocale:
    available_locales_tip: LangItem = LangItem("nbp_vrc", "locale.available_locales_tip")
    select_locale_tip: LangItem = LangItem("nbp_vrc", "locale.select_locale_tip")
    locale_changed: LangItem = LangItem("nbp_vrc", "locale.locale_changed")


class NbpVrc:
    general = NbpVrcGeneral
    login = NbpVrcLogin
    friend = NbpVrcFriend
    user = NbpVrcUser
    world = NbpVrcWorld
    locale = NbpVrcLocale


class Lang(LangModel):
    nbp_vrc = NbpVrc
